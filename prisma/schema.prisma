generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  EMPLOYER
  ADMIN
}

enum JobStatus {
  PENDING
  APPROVED
  REJECTED
  CLOSED
}

enum RemoteType {
  REMOTE
  ONSITE
  HYBRID
}

model Job {
  id             String     @id @default(cuid())
  jobTitle       String
  jobDescription String     @db.Text
  jobType        String?
  roleLocation   String
  companyName    String
  remote         RemoteType @default(REMOTE)
  skills         String[]
  pay            Float

  status JobStatus @default(PENDING)

  employer  Employer @relation(fields: [employerId], references: [id])
  employerId String

  approvedBy Admin?  @relation(fields: [adminId], references: [id])
  adminId    String?

  applications JobApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobApplication {
  id        String  @id @default(cuid())
  job       Job     @relation(fields: [jobId], references: [id])
  jobId     String
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  status    String  @default("PENDING")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([jobId, studentId])
}

model Student {
  id             String           @id @default(cuid())
  user           User             @relation(fields: [userId], references: [id])
  userId         String           @unique
  major          String?
  university     String?
  gradYear       Int?
  skills         String[]
  resume         String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  JobApplication JobApplication[]
}

model Employer {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  companyName String
  industry    String?
  location    String?
  companySize Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Job         Job[]
}

model Admin {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  permissions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Job         Job[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(STUDENT)
  accounts      Account[]
  sessions      Session[]
  student       Student?
  employer      Employer?
  admin         Admin?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// ...existing code...

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
